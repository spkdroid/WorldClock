/*
 * Copyright (C) 2025 SPKD World Clock
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.spkd.worldclock.di

import android.content.Context
import androidx.room.Room
import com.spkd.worldclock.core.database.TimeZoneDao
import com.spkd.worldclock.core.database.TimeZoneDatabase
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import javax.inject.Singleton

/**
 * Hilt dependency injection module for database-related components.
 * 
 * This module provides the configuration and creation of database-related
 * dependencies for the application. It follows the dependency injection
 * pattern to ensure proper separation of concerns and testability.
 * 
 * The module is installed in the SingletonComponent, ensuring that database
 * instances are created once and shared throughout the application lifecycle.
 * This prevents multiple database connections and ensures data consistency.
 * 
 * Key responsibilities:
 * - Configure and create Room database instance
 * - Provide DAO instances for data access
 * - Manage database lifecycle and singleton behavior
 * - Handle database configuration (name, version, etc.)
 * 
 * Database configuration features:
 * - Singleton pattern for single database instance
 * - Room persistence library integration
 * - Application context injection for proper lifecycle management
 * - Automatic database creation and schema management
 * 
 * @see dagger.hilt.InstallIn
 * @see dagger.hilt.components.SingletonComponent
 * @see com.spkd.worldclock.core.database.TimeZoneDatabase
 */
@Module
@InstallIn(SingletonComponent::class)
object DatabaseModule {

    /**
     * Provides the TimeZoneDatabase instance for the application.
     * 
     * Creates and configures the Room database with proper settings for
     * the world clock application. The database is created as a singleton
     * to ensure single instance throughout the app lifecycle.
     * 
     * Database configuration:
     * - Uses application context for proper lifecycle management
     * - Named with TimeZoneDatabase.DATABASE_NAME constant
     * - Automatically handles schema creation and migration
     * 
     * @param context Application context injected by Hilt
     * @return Configured TimeZoneDatabase instance
     * 
     * @see androidx.room.Room
     * @see com.spkd.worldclock.core.database.TimeZoneDatabase
     */
    @Provides
    @Singleton
    fun provideTimeZoneDatabase(
        @ApplicationContext context: Context
    ): TimeZoneDatabase {
        return Room.databaseBuilder(
            context,
            TimeZoneDatabase::class.java,
            TimeZoneDatabase.DATABASE_NAME
        ).build()
    }

    /**
     * Provides the TimeZoneDao instance for data access operations.
     * 
     * Extracts the DAO from the database instance, providing type-safe
     * access to time zone data operations. The DAO is automatically
     * generated by Room based on the interface definition.
     * 
     * @param database TimeZoneDatabase instance from which to extract the DAO
     * @return TimeZoneDao instance for database operations
     * 
     * @see com.spkd.worldclock.core.database.TimeZoneDao
     */
    @Provides
    fun provideTimeZoneDao(database: TimeZoneDatabase): TimeZoneDao {
        return database.timeZoneDao()
    }
}
